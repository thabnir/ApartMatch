# -*- coding: utf-8 -*-
"""Description-Matching-For-Realipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122cSW3LhMyC6FvvvU-r2ZSg1BmNSS7Un
"""

!pip install sentence-transformers

# Load a pretrained bi-encoder model
from sentence_transformers import SentenceTransformer, util

model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

def match_desc(user_desc, website_descs):
  user_emb = model.encode(user_desc, convert_to_tensor = True)
  website_embs = model.encode(website_descriptions, convert_to_tensor=True)
  similarity_scores = util.pytorch_cos_sim(user_emb, website_embs)

  num_top_items = 10
  top_similarity_indices = similarity_scores.argsort(descending=True, dim=1)[:, :num_top_items]

  # Extract the top 10 indices as a Python list. Indices here refers to the index (position) that the house was in inside the list of houses
  top_indices_list = top_similarity_indices[0].tolist()

# The below would be the actual user input (their text description of their ideal home)
user_description = "I'm looking for a spacious, modern house with a large backyard"
example = "VAST CONDO IN THE COVETED MILE END - Bright, open-plan living spaces. Abundant windows + skylights. 3 bedrooms. Generous kitchen with central island and ample storage. Intimate terrace overlooking Parc St-Michel. Enjoy the neighborhood life: Within walking distance of public transit, the restaurants on St-Laurent Street and the caf√©s and boutiques of the Mile End. Ideal location for a family: live on a quiet street, just steps away from Parc St-Michel's playgrounds and soccer field. Experience the best of the Mile End!"

# The below LIST variable should store the descriptions of all the houses from the website ideally in a dictionary mapping listings to descriptions
# Loops through 'description' key of each house and add listing-description pairs to dict? (?)
website_descriptions = [
    "Modern 3-bedroom house with spacious living areas and a large backyard",
    "Cozy 2-bedroom cottage with a garden",
    "Contemporary 4-bedroom home with an open floor plan and outdoor space",
]

# Need to adjust this to our data format
# Encode user description
user_emb = model.encode(user_description, convert_to_tensor=True)

# Encode website descriptions
website_embs = model.encode(website_descriptions, convert_to_tensor=True)

# print(type(user_emb)) for testing purposes
# print(user_emb)

"""**Encode**

- Returns a PyTorch Tensor
- Performs tokenization of input text
- Each word is represented as a vector then entire text is vectorized
"""

# Compute cosine similarity scores between user text description and realtor website descriptions for each listing
similarity_scores = util.pytorch_cos_sim(user_emb, website_embs)

"""similarity_scores stores a similarity matrix which is a two-dimensional array where each element similarity_scores[i][j] represents the cosine similarity between the i-th element of user_emb and the j-th element of website_embs. In other words, it quantifies how similar each user embedding is to each website embedding."""

print(similarity_scores) # for testing purposes

num_top_items = 10
top_similarity_indices = similarity_scores.argsort(descending=True, dim=1)[:, :num_top_items]

# Extract the top 10 indices as a Python list. Indices here refers to the index (position) that the house was in inside the list of houses
top_indices_list = top_similarity_indices[0].tolist()

print(top_indices_list)